<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>List Devices</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          sans-serif;
        margin: 2em;
        background-color: #f7f7f7;
        color: #333;
      }
      h1 {
        color: #1a1a1a;
      }
      .controls-container {
        display: flex;
        justify-content: flex-end; /* Căn nút "Create" sang phải */
        align-items: center;
        margin-bottom: 1.5em;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
      }
      th,
      td {
        padding: 15px;
        border-bottom: 1px solid #ddd;
        text-align: left;
        vertical-align: middle;
      }
      th {
        background-color: #007bff;
        color: white;
      }
      tr:hover {
        background-color: #f1f1f1;
      }
      .error {
        color: #d8000c;
        text-align: center;
        font-weight: bold;
      }
      .btn {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: white;
        font-weight: bold;
        transition: opacity 0.2s;
      }
      .btn:hover {
        opacity: 0.8;
      }
      .btn-create {
        background-color: #28a745;
      }
      .btn-detail {
        background-color: #17a2b8;
      }
      .btn-delete {
        background-color: #dc3545;
      }
      .btn-update {
        background-color: #007bff;
      }
      .actions-cell div {
        margin-bottom: 5px;
      }
    </style>
  </head>
  <body>
    <h1>List Devices</h1>
    <div class="controls-container">
      <button class="btn btn-create">Create new device</button>
    </div>

    <table id="sectionsTable">
      <thead>
        <tr>
          <th>Devices Name</th>
          <th>Devices Description</th>
          <th>Cost</th>
          <th>SaleOff</th>
          <th>Famous</th>
          <th>Models</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>

    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const tableBody = document.getElementById("tableBody");
        const createButton = document.querySelector(".btn-create");
        const devicesApiUrl = "http://localhost:3000/api/devices";
        const modelsApiUrl = "http://localhost:3000/api/models";
        const accessToken = localStorage.getItem("access_token");

        createButton.addEventListener("click", () => {
          window.location.href = "/createdevice";
        });

        if (!accessToken) {
          tableBody.innerHTML = `<tr><td colspan="7" class="error">Lỗi: Không tìm thấy token. Vui lòng đăng nhập lại.</td></tr>`;
          return;
        }

        const config = {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        };

        const displayError = (message) => {
          tableBody.innerHTML = `<tr><td colspan="7" class="error">${message}</td></tr>`;
        };

        try {
          const [modelsResponse, devicesResponse] = await Promise.all([
            axios.get(modelsApiUrl, config),
            axios.get(devicesApiUrl, config),
          ]);
          const models = modelsResponse.data.data || modelsResponse.data;
          const devices = devicesResponse.data.data || devicesResponse.data;

          const modelMap = new Map();
          if (Array.isArray(models)) {
            models.forEach((model) => {
              modelMap.set(model._id, model.modelName);
            });
          }

          tableBody.innerHTML = "";
          if (!devices || devices.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="7" style="text-align:center;">Không có dữ liệu để hiển thị.</td></tr>`;
            return;
          }

          devices.forEach((device) => {
            const row = tableBody.insertRow();
            const modelId = device.model?._id || device.model;
            const modelName = modelMap.get(modelId) || "N/A";
            row.dataset.modelId = modelId || "";
            row.innerHTML = `
                    <td>${device.deviceName}</td>
                    <td>${device.deviceDescription}</td>
                    <td>${device.cost}</td>
                    <td>${device.saleOff}</td>
                    <td>${device.famouse ? "Có" : "Không"}</td>
                    <td>${modelName}</td>
                    <td class="actions-cell">
                    <div>
                        <button class="btn btn-detail" data-id="${
                          device._id
                        }">Detail</button>
                    </div>
                    <div>
                        <button class="btn btn-delete" data-id="${
                          device._id
                        }">Delete</button>
                    </div>
                      <div>
                        <button class="btn btn-update" data-id="${
                          device._id
                        }">Update</button>
                    </div>
                    </td>
                `;
          });
        } catch (error) {
          console.error("Lỗi khi tải dữ liệu:", error);
          let errorMessage =
            "Không thể kết nối tới API. Vui lòng kiểm tra lại.";
          if (
            error.response &&
            (error.response.status === 401 || error.response.status === 403)
          ) {
            errorMessage = "Lỗi xác thực. Token không hợp lệ hoặc đã hết hạn.";
          }
          displayError(errorMessage);
        }

        tableBody.addEventListener("click", (event) => {
          const target = event.target;
          const deviceId = target.dataset.id;

          if (target.classList.contains("btn-detail")) {
            if (deviceId) {
              window.location.href = `/device/${deviceId}`;
            }
          }
          if (target.classList.contains("btn-update")) {
            if (deviceId) {
              window.location.href = `/updatedevice/${deviceId}`;
            }
          }

          if (target.classList.contains("btn-delete")) {
            if (
              deviceId &&
              confirm(`Do you want to delete device with ID: ${deviceId}}?`)
            ) {
              axios
                .delete(`${devicesApiUrl}/${deviceId}`, config)
                .then(() => {
                  alert("Xóa thành công!");
                  target.closest("tr").remove();
                })
                .catch((error) => {
                  console.error("Lỗi khi xóa:", error);
                  alert("Đã xảy ra lỗi khi xóa section.");
                });
            }
          }
        });
      });
    </script>
  </body>
</html>
